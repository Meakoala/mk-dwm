#!/bin/env sh

# Initialize variables
printf "$$" > ~/.cache/pidofbar
sec=0

# Function to update CPU load
update_cpu() {
  cpu="$(grep -o "^[^ ]*" /proc/loadavg)"
}

# Function to update memory usage
update_memory() {
  memory="$(free -h | awk 'NR==2 {print $3}')"
}

# Function to update time
update_time() {
  time="$(date "+%b %d %H:%M ")"
}

# Function to update weather
update_weather() {
  weather="$(curl -s "wttr.in/dallas?format=1" | sed -E "s/^(.).*\+/\1/")"
}

# Function to update battery status and capacity
update_bat() {
  if [[ -e /sys/class/power_supply/BAT0/status ]]; then
    read -r bat_status < /sys/class/power_supply/BAT0/status
  else
    return  # Exit the function early if battery info is not available
  fi

  if [[ -e /sys/class/power_supply/BAT0/capacity ]]; then
    read -r bat_capacity < /sys/class/power_supply/BAT0/capacity
    bat="$bat_status $bat_capacity%"
  else
    bat="$bat_status (capacity not available)"
  fi
}

# Function to update volume
update_vol() {
  vol="奄 $(pactl list sinks | awk '/Volume:/ {print $5}' | head -n 1 | tr -d '%')%"
}

# Function to update backlight
update_backlight() {
  if [[ -e /sys/class/backlight/intel_backlight/actual_brightness ]]; then
    read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
    read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
    backlight="☀$((actual_brightness * 100 / max_brightness))%"
  else
    backlight="Backlight not available"
  fi
}

# Function to display the status
display() {
  status=""

  [ -n "$bat" ] && status="$status $bat"
  [ -n "$backlight" ] && status="$status $backlight"
  [ -n "$vol" ] && status="$status $vol"
  [ -n "$time" ] && status="$status $time"

  xsetroot -name "$status"
}

# Set up signal handlers
trap "update_vol; display" "RTMIN"
trap "update_backlight; display" "RTMIN+1"
trap "update_bat; display" "RTMIN+2"

# Initial updates for modules that don't update on their own
update_vol

if [[ -e /sys/class/backlight/intel_backlight/actual_brightness ]]; then
  update_backlight
fi

while true; do
  sleep 1 && {
    [ $((sec % 5)) -eq 0 ] && update_time
    [ $((sec % 5)) -eq 0 ] && update_vol
    [ $((sec % 60)) -eq 0 ] && update_bat
    [ $((sec % 5)) -eq 0 ] && display
    sec=$((sec + 1))
  }
done

